/**
 * ExecTran.ds
 *
 * @input OrderID : String
 * @input AccessID : String
 * @input AccessPass : String
 * @input PaymentInstruments : dw.order.PaymentInstrument
 * @input MemberID : String
 * @output resultPayment : Object
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.web );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.svc );
function execute( pdict : PipelineDictionary ) : Number
{
	var orderStatus = "Open!";
   	 try {
   	 	var group = dw.order.OrderMgr.getOrder(pdict.OrderID).getCustomer().getCustomerGroups().iterator();
		var html ='';
		while(group.hasNext()){
			let g = group.next();
			if(g.getID() != 'Everyone')
				html += g.getID().toString();
		}

		var siteID = Site.getCurrent().getCustomPreferenceValue('gmo_siteID');
		var sitePass = Site.getCurrent().getCustomPreferenceValue('gmo_sitePass');
		var service:Service;
	    var result:Result;
	    var paramRequest = 'AccessID=' + pdict.AccessID
	                       +'&AccessPass=' + pdict.AccessPass
	                       +'&OrderID=' +  pdict.OrderID;
	    var method = '1';
	    var creditCardPayInfo = pdict.PaymentInstruments.custom.creditCardPayInfo;
	    if(creditCardPayInfo !== null) {
	    	method = pdict.PaymentInstruments.custom.creditCardPayInfo;
	    }
	    paramRequest+='&Method=' +  method;
	    var creditCardPayTime = pdict.PaymentInstruments.custom.creditCardPayTime;
	    if(creditCardPayTime !== null) {
	    	paramRequest+='&PayTimes=' +  creditCardPayTime;
	    }
	    var Token =  pdict.PaymentInstruments.custom.creditCardToken;
	    if(Token!=null){
	 	    paramRequest+='&Token=' +  Token;
	 	}else{
	    	var creditCardSeq = pdict.PaymentInstruments.custom.creditCardSeq;
	    	paramRequest+='&SiteID=' +  siteID
	    					+ '&SitePass=' +  sitePass
	    					+ '&MemberID=' + pdict.MemberID
	    					+ '&CardSeq=' + creditCardSeq;
	    }
	    if(pdict.DeviceCategory != null) {
	        paramRequest+='&HttpAccept=' +  pdict.HttpAccept
	                        + '&HttpUserAgent=' + pdict.HttpUserAgent
	                        + '&DeviceCategory=' + pdict.DeviceCategory;
	    }

	    service = ServiceRegistry.get("GMO.ExecTransaction");
	    service.addHeader("Content-Type", "application/x-www-form-urlencoded");
	    service.setRequestMethod("POST");
	    result = service.call(paramRequest);
	   	var respone = result.object.text.split("&");
	    var objrespone = {};
	    for(let i in respone){
		    var split = respone[i].split('=');
		    objrespone[split[0]] = split[1];
		}
		if(objrespone.hasOwnProperty('ACS')){
			var paymentStatus = "Not Paid!";
	    	pdict.resultPayment = objrespone;
	    	Logger.getLogger("GMO","GMO").debug("API ExecTran.idPass : execute order ID {0} success !; order status :"+ orderStatus +"; payment status : " +  paymentStatus,pdict.OrderID);
	    }else{
	    	var paymentStatus = "Not Paid!";
	    	Logger.getLogger("GMO","GMO").debug("API ExecTran.idPass : execute order ID {0} fail !; order status : "
	    										+ orderStatus
	    										+"; payment status : "
	    										+  paymentStatus
	    										+"; ErrCode :  "
	    										+ objrespone["ErrCode"]
	    										+"; ErrInfo :  "
	    										+ objrespone["ErrInfo"],pdict.OrderID);
	    	return PIPELET_ERROR;
	    }
    } catch(e) {
    	var paymentStatus = "Not Paid!";
    	Logger.getLogger("GMO","GMO").debug("API ExecTran.idPass : execute order ID {0} error !; order status : "+ orderStatus +"; payment status :  " +  paymentStatus,pdict.OrderID);
		return PIPELET_ERROR;
	}
  	return PIPELET_NEXT;
}
function memberGetFinalCardRegistration(siteID,sitePass,MemberID){
	    var finalcardSeq = -1;
		var service:Service;
	    var result:Result;
	    var paramRequest = 'SiteID=' + siteID + '&'
	                       + 'SitePass=' + sitePass + '&'
	                       + 'MemberID=' +  MemberID;
	    service = ServiceRegistry.get("GMO.SearchCard");
	    service.addHeader("Content-Type", "application/x-www-form-urlencoded");
	    service.setRequestMethod("POST");
	    result = service.call(paramRequest);
	   	var respone = result.object.text.split("&");
	    var objrespone = {};
	    for(let i in respone){
		    var split = respone[i].split('=');
		    objrespone[split[0]] = split[1];
		}

	    if(objrespone.hasOwnProperty('CardNo')){
			Logger.getLogger("GMO","GMO").debug("API SearchCard.idPass in ExecTranAuth: Search card fail !!! ErrInfo={0}",objrespone['ErrInfo']);
			var arrCardSeq = objrespone['CardSeq'].split('|');
			finalcardSeq = arrCardSeq.slice(-1)[0];
	    }
	    return finalcardSeq;
}
exports.execute = execute;